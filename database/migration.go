// Package database Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// database/migrations/000001_init.down.sql
// database/migrations/000001_init.up.sql
// database/migrations/000002_rename_github_tables.down.sql
// database/migrations/000002_rename_github_tables.up.sql
package database

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initDownSql,
		"000001_init.down.sql",
	)
}

func _000001_initDownSql() (*asset, error) {
	bytes, err := _000001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1570529246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4d\x8f\xdb\x36\x10\xbd\xeb\x57\xf0\x96\x0f\x2c\x1a\xa0\x68\x73\xc9\x69\x93\xba\x85\xd1\x64\x37\x70\x5c\x20\x8b\xa2\x20\x28\x69\x2c\x0d\x96\x22\x15\x72\x64\xd7\xfb\xeb\x0b\xca\x5a\x8b\xb4\x28\x59\x59\x64\xb7\xc9\x51\x7c\x43\x6a\xc8\xf7\xde\x0c\xa5\xb7\x8b\x3f\x96\x57\x6f\x92\xe4\xdd\x6a\x71\xb9\x5e\xb0\xf5\xe5\xdb\xf7\x0b\xb6\xfc\x9d\x5d\x5d\xaf\xd9\xe2\xf3\xf2\xd3\xfa\x13\xd3\xa6\x10\x0a\xef\x04\xa1\x56\x96\x6f\xc1\x58\xd4\x0a\x72\xf6\x3c\x61\xcc\x36\xd5\xcf\xbf\xbe\x66\x59\x29\x8c\xc8\x08\x0c\xdb\x0a\xb3\x47\x55\x3c\x7f\xfd\xcb\x0b\xf6\x71\xb5\xfc\x70\xb9\xba\x61\x7f\x2e\x6e\x2e\x12\xc6\xba\x99\x96\xa1\x22\x28\xc0\xb0\xcb\xd5\xea\xf2\xe6\x22\x49\x18\x13\x5b\x41\xc2\xf0\xc6\x48\x46\xf0\x2f\xb9\xe8\x4c\x4b\x29\x52\x6d\x04\x69\x63\x59\x8a\x05\xaa\xc3\xb8\x01\x41\x90\x73\x41\x8c\xb0\x02\x4b\xa2\xaa\xe9\xce\x21\x39\xd8\xcc\x60\xed\xd2\x3c\xae\x02\x95\xc0\x7e\xcd\x92\x2a\xe9\xbf\x03\x73\x6f\x61\xa9\x0b\xec\x27\x2a\x51\x41\xff\xa0\x73\xe0\x98\x1f\x9f\xf5\x4e\x41\xce\x6b\x83\x5b\x41\xc0\x0d\xd4\xda\xcf\xb0\x6e\x52\x89\xd9\x60\x98\x34\x09\x39\x3a\xa9\xa9\xf3\xc8\xb6\x92\x17\x3d\x35\xcb\xab\xdf\x16\x9f\xe7\x50\x63\xd9\xf5\xd5\x38\x69\xf7\x41\x2f\xa6\x49\x6f\x2c\x98\xa7\x23\x3b\x45\xed\x11\x5f\xd5\x42\xed\xfb\xe7\x51\xc2\x43\x72\x37\x5a\x4a\xbd\x83\x40\x2c\x87\x31\x54\x85\x37\x56\xa2\x01\x91\x4a\x60\xa9\xd6\x12\x84\x9a\x21\x8c\x4c\x04\xa2\xfa\x1a\xa5\x78\x34\xf0\xe3\xaa\xed\x41\x5f\xfd\xf5\xfe\xfd\x20\xa4\x5f\x3a\x8c\x99\x16\x5c\x37\x5e\xa0\xa5\x88\x10\x47\x86\x9f\x42\x9f\x81\x8a\x5a\x5d\x0e\x74\x35\x53\x8f\x6d\x3e\x48\xda\x20\x3c\x86\x2c\x19\x73\xc2\x74\x62\xe1\x15\x98\x02\x78\xa6\xab\x0a\xc9\xd7\xc8\x01\x35\x90\x0a\x0b\x87\xa0\x21\x6a\xbf\x34\xc2\x96\x11\xd4\x64\x25\x6e\x21\xf7\xc7\x32\xa9\x15\x84\x25\x6f\xa2\xb4\x6d\x44\x23\x89\xa7\x46\xa8\xac\x3c\x4e\x88\x55\xbc\x1c\xad\x53\x77\xf0\xaa\x8d\x36\xb7\xa7\xcf\x96\x67\xba\x51\xe4\x9b\xa5\x91\x92\x07\x6a\x2e\x85\xe5\x68\x6d\x03\x36\x30\x8b\xb0\x7c\x87\xb7\x18\x8c\xe9\x0a\x6a\x51\xc0\xcc\x52\x2b\x54\xd1\xf8\xd1\xd3\x1e\xaa\x41\x75\x69\x0c\x72\x76\xc6\x30\x63\xc6\x6a\xb1\x09\x47\x19\x4e\xfb\x1a\x86\x58\xe7\x01\x7f\x7f\x75\x63\xcb\x28\x33\xd6\x96\xfe\x36\x2d\x09\x53\x88\x3b\xa7\xf1\xd3\x54\x49\xd7\x98\xd9\x36\xf2\xef\x7f\x82\xf7\xc5\xbd\xe5\x90\x9d\xa0\xac\x3c\x5d\xec\x9c\xe9\x62\x56\x69\xbd\x37\xe6\xa1\x99\x16\xec\x28\x78\x9c\x9e\x60\x2d\x16\x0a\x20\x7a\x3e\xa9\xce\xbd\x76\x20\xb5\x8d\x9e\x55\x07\xa4\xfb\x11\x39\xf4\xf8\x88\x24\x9c\xe5\x41\xd1\xbc\xcb\xc6\x19\x7d\xa7\x20\xa3\x5b\x91\x3a\xbb\x0d\xbd\x59\xa1\x04\x4b\xae\x14\x74\x92\x0f\xe2\x7b\x94\x90\x64\x44\xab\xa7\x66\x51\x4d\x95\x82\xf1\x72\x39\x92\xbe\xef\xbd\x1d\xac\xe0\x05\xb4\xa6\x18\x46\x58\x72\x6e\xb8\x7f\x43\x9f\xc8\xb4\x76\x5d\xa5\x1f\xa1\xa2\x85\x22\x2c\x9c\x53\x76\xa8\xc0\x56\xd3\x43\x51\x7e\x8d\x9a\xf9\x3d\xe7\x8f\xa4\xea\x86\x4a\x6d\xb8\xb0\x56\x67\x18\xde\x21\x42\x4d\x3f\x4c\x66\x87\x2d\x04\x8c\x4f\x6a\xe3\x1b\x48\xe1\xe9\xe9\x1e\x50\xd4\xd3\x1e\x65\x6f\x26\xfd\xb5\x6b\x76\x06\xbe\x34\x60\x1f\x8d\xfd\x3c\xc7\xf6\xfa\xed\x51\x36\x59\xe7\xa6\xe4\xe2\x2e\x1d\x06\x36\x43\x46\x3a\xe4\x0c\xb3\xa7\x51\x23\xf4\xb6\x61\xb6\x14\x23\x88\x23\x32\x02\x05\x52\x2e\x85\x2a\x20\xe7\x1b\x57\xb8\xfc\x4a\x3a\x5a\xb6\x23\x55\xb7\xbd\x7b\xcd\xfd\xe8\x93\x70\x7a\xc8\x25\x88\x3c\x7e\x58\x1d\x72\xe6\xb0\x4e\xa3\x46\x0e\xab\x0d\x8b\x1e\x56\x8b\xc4\x0f\xeb\x81\x7d\xa3\x12\xa8\x48\xa0\xbb\xb3\x64\x42\xf1\x4a\xe7\xb8\xd9\x07\x6d\xc4\xbb\xb5\x1e\x93\x3a\x02\xa7\xdf\x3b\xed\x60\x3e\x1c\x89\x1c\x70\x07\x8c\xb6\xd5\x1e\x1f\x69\xab\x3f\x40\x83\x33\xb0\x45\xd8\xf1\x88\x14\xbf\x9b\xd6\x17\xad\x57\x6d\x29\x1c\xad\x64\x0f\xa8\x84\xfc\x70\x12\x8f\x54\x10\xc3\x42\x71\x90\xaa\xc7\xec\xa4\x35\x4e\x65\x10\x64\x3d\xde\x02\xbf\xf9\xed\xc7\x36\x69\x85\xf4\xbf\xd0\x7e\x4a\xce\x80\xfd\x18\x7b\xbe\x08\x5e\xbd\x4c\xd6\x25\x1c\x3e\xb6\xd0\xba\x9c\x72\xf7\x29\x78\xf8\xe3\x42\x98\x4a\xa4\x3d\xdb\x21\x95\xac\x28\xed\x5e\x65\x17\x2c\x6d\x28\x7c\xc3\xbd\x45\x92\x5c\x83\x65\x4a\x13\xb3\xa4\x0d\x30\x2a\x81\x2d\x5d\x4f\x7e\x77\x08\x78\x66\x99\xde\xb0\x8f\x8d\x94\xab\xc3\xcc\x67\xf6\xa7\x64\xa9\x2c\x81\xc8\x19\x76\xb3\x6c\x3b\xcd\x0b\x5a\xb5\xf9\x77\x4b\x5c\x30\xab\x99\x60\x29\x90\x53\x5c\x9b\xf4\x4e\x37\x32\x67\x29\x24\x91\x5d\xf7\xa9\xbd\x7c\x35\x5b\xee\xdf\xc9\xf5\x6f\x60\x85\x89\x7e\x87\x9b\x0d\x2f\x1b\x75\x3b\xcf\x36\xa8\x5c\x23\x93\x7b\x4e\x7a\xc2\x4c\xda\x38\x48\x48\x3e\xcc\xe4\x08\xb5\x36\x71\x5b\xf0\x7e\x24\x09\xea\xff\x45\xc4\xf0\x79\x1e\x8d\x91\x19\x6c\xe2\x47\xbb\xb7\x4e\x4a\x6c\xe8\xda\xb3\xb7\xd8\xeb\x0f\x1f\x96\xeb\x37\xc9\x7f\x01\x00\x00\xff\xff\x69\x1e\x7d\x28\xab\x17\x00\x00")

func _000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initUpSql,
		"000001_init.up.sql",
	)
}

func _000001_initUpSql() (*asset, error) {
	bytes, err := _000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init.up.sql", size: 6059, mode: os.FileMode(420), modTime: time.Unix(1571827828, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_rename_github_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd0\xcd\x0a\x83\x30\x0c\xc0\xf1\x7b\x9f\xa2\xef\xd1\x93\x8e\x32\x04\x3f\x40\x7a\x2f\x6e\x0b\x2e\xa0\xad\x6b\x5a\x07\x7b\xfa\xdd\x5d\x6a\x4f\x3b\xe7\x9f\x1f\x21\xb5\xbe\x36\xbd\x12\xa2\x6a\x8d\x1e\xa5\xa9\xea\x56\xcb\x19\xe3\x33\xdd\xac\x0f\xf3\xe4\xf0\x33\x45\xf4\x8e\xec\x0e\x81\xd0\x3b\x78\xc8\x51\xf7\x55\xa7\xa5\x19\x64\xa6\x50\x9c\x96\x08\x02\xaf\x1c\x26\xec\x76\x80\xcd\x13\x46\x1f\x10\x78\x84\x0f\x58\x0b\x89\x52\x46\x39\x8e\xf2\xfb\xf6\xee\xd7\x15\x5c\x3c\x71\x98\xe4\x0f\x9f\xd9\xd2\xb2\xd8\x00\xaf\x04\x94\x39\x26\x53\x14\x35\x1b\x60\x47\x78\x97\xd1\xdf\xb0\x6c\x9f\xbe\xaf\x50\x2a\x21\x2e\x43\xd7\x35\x46\x89\x6f\x00\x00\x00\xff\xff\x5c\x3d\xe0\x71\xbf\x02\x00\x00")

func _000002_rename_github_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_rename_github_tablesDownSql,
		"000002_rename_github_tables.down.sql",
	)
}

func _000002_rename_github_tablesDownSql() (*asset, error) {
	bytes, err := _000002_rename_github_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_rename_github_tables.down.sql", size: 703, mode: os.FileMode(420), modTime: time.Unix(1571828565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_rename_github_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4d\x6e\xb3\x30\x10\x40\xf7\x3e\xc5\x5c\x20\x27\x60\x95\x7c\x9f\x5b\x21\x85\x50\x11\xd4\x76\x87\x0c\x4c\xd3\x91\x00\xd3\xb1\xa1\x6a\x4e\x5f\x41\xd4\x1f\xa7\xd8\x61\x87\x34\x6f\x1e\xe2\x0d\x3b\x79\x1f\x1f\x22\x21\x36\x1b\xa8\x59\xf7\x30\x12\xbe\x1b\xb0\x1a\x4a\x04\x55\x36\x38\x3d\x56\x8c\xca\x22\xb4\xca\x22\x93\x6a\xe8\x8c\xf5\x85\x13\xff\xb3\xf4\x01\x1e\x63\xf9\x04\xf1\x1d\xc8\xe7\xf8\x98\x1f\x41\xf3\x49\x75\x74\x56\x96\x74\x67\xa2\x45\x64\x30\xc8\x9e\x11\x63\xaf\x0d\x59\xcd\x84\x1e\x82\x8c\x19\x82\xb3\xa2\xd2\x6d\x8b\x9d\xf5\x30\xfd\xd0\x34\x05\xe3\xdb\x80\x66\x0d\x52\x30\xce\xdf\xba\x82\xfc\x79\xef\x94\x93\xb1\x53\x2d\x82\x9d\x2a\xce\x45\x4d\x8f\x15\xbd\x7c\x40\xcf\x7a\xa4\x1a\x59\x6c\xf7\xb9\xcc\x20\xdf\xee\xf6\xd2\xad\x56\x8c\xc8\x86\x74\x87\x35\x64\xf2\xb0\x4d\x24\xe4\x29\x9c\xc8\xbe\x0e\x65\xe1\x01\x23\xc7\x36\x07\x0e\x59\xae\x00\x77\xfb\xf7\x0d\x42\x92\x65\xce\x75\x5d\xae\x15\xb2\x5c\x13\x0b\xfb\xdf\x65\x6f\x7a\x16\x48\xd7\xe7\x5c\x3f\xa4\xf3\x80\x7e\xdb\xd7\x8f\xb2\x56\xfa\x97\x0f\xb8\xd7\x04\xb8\xb1\x10\x09\xf1\x2f\x4d\x92\x38\x8f\xc4\x67\x00\x00\x00\xff\xff\x9a\x3a\xc2\xa9\xf5\x03\x00\x00")

func _000002_rename_github_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_rename_github_tablesUpSql,
		"000002_rename_github_tables.up.sql",
	)
}

func _000002_rename_github_tablesUpSql() (*asset, error) {
	bytes, err := _000002_rename_github_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_rename_github_tables.up.sql", size: 1013, mode: os.FileMode(420), modTime: time.Unix(1571828565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init.down.sql":                 _000001_initDownSql,
	"000001_init.up.sql":                   _000001_initUpSql,
	"000002_rename_github_tables.down.sql": _000002_rename_github_tablesDownSql,
	"000002_rename_github_tables.up.sql":   _000002_rename_github_tablesUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init.down.sql":                 &bintree{_000001_initDownSql, map[string]*bintree{}},
	"000001_init.up.sql":                   &bintree{_000001_initUpSql, map[string]*bintree{}},
	"000002_rename_github_tables.down.sql": &bintree{_000002_rename_github_tablesDownSql, map[string]*bintree{}},
	"000002_rename_github_tables.up.sql":   &bintree{_000002_rename_github_tablesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
